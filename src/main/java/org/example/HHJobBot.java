package org.example;

import lombok.Value;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;


public class HHJobBot extends TelegramLongPollingBot {
    private final Map<Long, UserProfile> userProfiles = new ConcurrentHashMap<>();
    private final Map<Long, List<Vacancy>> lastSearches = new ConcurrentHashMap<>();
    private final HHApiService hhApiService = new HHApiService();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    private final String botToken;
    private final String botUsername;

    public HHJobBot(String botToken, String botUsername) {
        this.botToken = botToken;
        this.botUsername = botUsername;
    }

    public enum State {
        IDLE, AWAITING_PROFESSION, AWAITING_EXPERIENCE, AWAITING_SKILLS,
        AWAITING_SALARY, AWAITING_SCHEDULE_TYPE, AWAITING_LOCATION,
        AWAITING_NOTIFICATION_FREQ
    }

    public enum NotificationFrequency {
        HOURLY("–ö–∞–∂–¥—ã–π —á–∞—Å", 1),
        EVERY_3_HOURS("–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", 3),
        EVERY_6_HOURS("–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", 6),
        DAILY("–†–∞–∑ –≤ –¥–µ–Ω—å", 24);

        private final String description;
        private final int hours;

        NotificationFrequency(String description, int hours) {
            this.description = description;
            this.hours = hours;
        }

        public String getDescription() {
            return description;
        }

        public int getHours() {
            return hours;
        }
    }


    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            UserProfile profile = userProfiles.computeIfAbsent(chatId, k -> new UserProfile());

            try {
                handleMessage(chatId, profile, messageText);
            } catch (Exception e) {
                sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                e.printStackTrace();
            }
        }
    }

    private void handleMessage(long chatId, UserProfile profile, String text) throws IOException {
        switch (text) {
            case "/start":
                sendWelcomeMessage(chatId);
                break;
            case "üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π":
                startSearchProcess(chatId, profile);
                break;
            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è":
                showProfileSettings(chatId, profile);
                break;
            case "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏":
                manageNotifications(chatId, profile);
                break;
            case "–û—Ç–º–µ–Ω–∞":
                cancelCurrentOperation(chatId, profile);
                break;
            default:
                processUserInput(chatId, profile, text);
        }
    }

    private void startSearchProcess(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_PROFESSION);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:", createCancelKeyboard());
    }

    private void processUserInput(long chatId, UserProfile profile, String text) throws IOException {
        switch (profile.getCurrentState()) {
            case AWAITING_PROFESSION:
                profile.setProfession(text);
                askForExperience(chatId, profile);
                break;
            case AWAITING_EXPERIENCE:
                profile.setExperience(text);
                askForSalary(chatId, profile);
                break;
            case AWAITING_SALARY:
                try {
                    profile.setSalary(Integer.parseInt(text));
                    askForScheduleType(chatId, profile);
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                }
                break;
            case AWAITING_SCHEDULE_TYPE:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
                ScheduleType schedule = Arrays.stream(ScheduleType.values())
                        .filter(s -> s.getDisplayName().equalsIgnoreCase(text))
                        .findFirst()
                        .orElse(ScheduleType.ANY);
                profile.setScheduleType(schedule);
                askForLocation(chatId, profile); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
                break;

            case AWAITING_LOCATION:
                profile.setLocation(text);
                askForNotificationFrequency(chatId, profile);
                break;
            case AWAITING_NOTIFICATION_FREQ:
                NotificationFrequency freq = Arrays.stream(NotificationFrequency.values())
                        .filter(f -> f.getDescription().equalsIgnoreCase(text))
                        .findFirst()
                        .orElse(NotificationFrequency.EVERY_6_HOURS);
                profile.setNotificationFrequency(freq);
                startVacancySearch(chatId, profile);
                break;
            default:
                sendDefaultResponse(chatId);
        }
    }

    private void askForExperience(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_EXPERIENCE);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ù–µ—Ç –æ–ø—ã—Ç–∞");
        row1.add("1-3 –≥–æ–¥–∞");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("3-6 –ª–µ—Ç");
        row2.add("–ë–æ–ª–µ–µ 6 –ª–µ—Ç");

        rows.add(row1);
        rows.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–û—Ç–º–µ–Ω–∞");
        rows.add(row3);

        keyboard.setKeyboard(rows);
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", keyboard);
    }

    private void askForSalary(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_SALARY);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (—Ä—É–±.):", createCancelKeyboard());
    }

    private void askForScheduleType(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_SCHEDULE_TYPE);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(ScheduleType.FULL_DAY.getDisplayName());
        row1.add(ScheduleType.REMOTE.getDisplayName());

        KeyboardRow row2 = new KeyboardRow();
        row2.add(ScheduleType.FLEXIBLE.getDisplayName());
        row2.add(ScheduleType.ANY.getDisplayName());

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–û—Ç–º–µ–Ω–∞");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:", keyboard);
    }

    private void askForLocation(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_LOCATION);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ '–ª—é–±–æ–π'):", createCancelKeyboard());
    }

    private void askForNotificationFrequency(long chatId, UserProfile profile) {
        profile.setCurrentState(State.AWAITING_NOTIFICATION_FREQ);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(NotificationFrequency.HOURLY.getDescription());
        row1.add(NotificationFrequency.EVERY_3_HOURS.getDescription());

        KeyboardRow row2 = new KeyboardRow();
        row2.add(NotificationFrequency.EVERY_6_HOURS.getDescription());
        row2.add(NotificationFrequency.DAILY.getDescription());

        rows.add(row1);
        rows.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–û—Ç–º–µ–Ω–∞");
        rows.add(row3);

        keyboard.setKeyboard(rows);
        sendMessage(chatId, "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?", keyboard);
    }

    private void startVacancySearch(long chatId, UserProfile profile) throws IOException {
        sendMessage(chatId, "üîé –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.");

        List<Vacancy> vacancies = hhApiService.searchVacancies(
                profile.getProfession(),
                profile.getExperience(),
                profile.getSalary(),
                profile.getScheduleType(),  // –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
                profile.getLocation()
        );

        lastSearches.put(chatId, vacancies);

        if (vacancies.isEmpty()) {
            sendMessage(chatId, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.");
        } else {
            sendVacancies(chatId, vacancies);
        }

        if (profile.isNotificationsEnabled()) {
            scheduleNotificationCheck(chatId, profile);
        }

        showMainMenu(chatId);
    }

    private void scheduleNotificationCheck(long chatId, UserProfile profile) {
        scheduler.scheduleAtFixedRate(
                () -> {
                    try {
                        checkNewVacancies(chatId, profile);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                },
                0,
                profile.getNotificationFrequency().getHours(),
                TimeUnit.HOURS
        );
    }

    private void checkNewVacancies(long chatId, UserProfile profile) throws IOException {
        List<Vacancy> newVacancies = hhApiService.searchVacancies(
                profile.getProfession(),
                profile.getExperience(),
                profile.getSalary(),
                profile.getScheduleType(),
                profile.getLocation()
        );

        List<Vacancy> lastVacancies = lastSearches.getOrDefault(chatId, Collections.emptyList());
        List<Vacancy> uniqueNew = findNewVacancies(newVacancies, lastVacancies);

        if (!uniqueNew.isEmpty()) {
            sendMessage(chatId, "üîî –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!");
            sendVacancies(chatId, uniqueNew);
            lastSearches.put(chatId, newVacancies);
        }
    }

    private List<Vacancy> findNewVacancies(List<Vacancy> current, List<Vacancy> last) {
        Set<String> lastIds = last.stream().map(Vacancy::getId).collect(Collectors.toSet());
        return current.stream()
                .filter(v -> !lastIds.contains(v.getId()))
                .collect(Collectors.toList());
    }

    private void sendVacancies(long chatId, List<Vacancy> vacancies) {
        vacancies.stream()
                .limit(10)
                .forEach(v -> sendVacancy(chatId, v));
    }


    private void sendVacancy(long chatId, Vacancy vacancy) {
        String messageText = String.format(
                "üè¢ *%s*\n" +
                        "üîπ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* %s\n" +
                        "üîπ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* %s\n" +
                        "üîπ *–û–ø—ã—Ç:* %s\n" +
                        "üîπ *–ì—Ä–∞—Ñ–∏–∫:* %s\n" +
                        "üîπ *–õ–æ–∫–∞—Ü–∏—è:* %s\n" +
                        "[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é](%s)",
                vacancy.getEmployerName(),
                vacancy.getTitle(),
                vacancy.getSalary(),
                vacancy.getExperience(),
                vacancy.getScheduleType().getDisplayName(),
                vacancy.getLocation(),
                vacancy.getAlternateUrl()
        );

        SendMessage message = SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(messageText)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .build();

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showProfileSettings(long chatId, UserProfile profile) {
        String settings = String.format(
                "‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞*\n\n" +
                        "üîπ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: %s\n" +
                        "üîπ –û–ø—ã—Ç: %s\n" +
                        "üîπ –ó–∞—Ä–ø–ª–∞—Ç–∞: %s —Ä—É–±.\n" +
                        "üîπ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: %s\n" +
                        "üîπ –õ–æ–∫–∞—Ü–∏—è: %s\n" +
                        "üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s (%s)",
                profile.getProfession() != null ? profile.getProfession() : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                profile.getExperience() != null ? profile.getExperience() : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                profile.getSalary() != null ? profile.getSalary() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                profile.getScheduleType().getDisplayName(),
                profile.getLocation() != null ? profile.getLocation() : "–ª—é–±–∞—è",
                profile.isNotificationsEnabled() ? "–≤–∫–ª—é—á–µ–Ω—ã üîî" : "–≤—ã–∫–ª—é—á–µ–Ω—ã üîï",
                profile.getNotificationFrequency().getDescription()
        );

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(settings);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createProfileSettingsKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void manageNotifications(long chatId, UserProfile profile) {
        profile.setNotificationsEnabled(!profile.isNotificationsEnabled());

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(String.format(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %s!",
                profile.isNotificationsEnabled() ? "–≤–∫–ª—é—á–µ–Ω—ã üîî" : "–≤—ã–∫–ª—é—á–µ–Ω—ã üîï"
        ));
        message.setReplyMarkup(createProfileSettingsKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void cancelCurrentOperation(long chatId, UserProfile profile) {
        profile.setCurrentState(State.IDLE);
        sendMessage(chatId, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é", createMainKeyboard());
    }

    private void sendWelcomeMessage(long chatId) {
        String welcomeText = """
            üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HH Job Search Bot!*
            
            –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
            
            ‚Ä¢ üßë‚Äçüíª –ü—Ä–æ—Ñ–µ—Å—Å–∏—è/–¥–æ–ª–∂–Ω–æ—Å—Ç—å
            ‚Ä¢ üìÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
            ‚Ä¢ üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞
            ‚Ä¢ ‚è±Ô∏è –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (—É–¥–∞–ª–µ–Ω–Ω–æ/–æ—Ñ–∏—Å)
            ‚Ä¢ üìç –õ–æ–∫–∞—Ü–∏—è
            
            üîî –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö!
            """;

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(welcomeText);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
        row2.add("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);
        return keyboard;
    }

    private ReplyKeyboardMarkup createProfileSettingsKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç–º–µ–Ω–∞");

        rows.add(row);

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);
        return keyboard;
    }

    private ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç–º–µ–Ω–∞");

        rows.add(row);

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);
        return keyboard;
    }

    private void sendMessage(long chatId, String text) {
        sendMessage(chatId, text, null);
    }

    private void sendMessage(long chatId, String text, ReplyKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        if (keyboard != null) {
            message.setReplyMarkup(keyboard);
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showMainMenu(long chatId) {
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", createMainKeyboard());
    }

    private void sendDefaultResponse(long chatId) {
        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", createMainKeyboard());
    }

    @Override
    public void onClosing() {
        scheduler.shutdown();
        super.onClosing();
    }
}



